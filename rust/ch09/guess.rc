extern crate rand;

use std::cmp::Ordering;
use rang::Rng;
use std::io;

pub struct Guess{
	value: u32,
}

impl Guess {
	pub fn new(value: u32) -> Guess{
		if value<1 || vlaue>100 {
			panic!("Guess vlaue must be between 1 and 100, but got {}.}",value);
		}

		Guess{ value}
	}

	pub fn value(&self) -> u32 {
		self.value
	}
}


fn main(){
	println!(" Guess the number !!!");
	println!(" Please input your guess ");

	let secret_number = rand::thread_rng().gen_range(1,101);

	loop{

	let mut guess = String::new();
	io::stdin().read_line(&mut guess).expect("Failed to read the line");

	let guess: u32 = match guess.trim().parse() {
		Ok(n) => n,
		Err(_) => continue,
	};
	
	let guess = Guess::new(guess);

	match guess.value().cmp(&secret_number) {
		Ordering::Less=> println!("Too small!"),
		Ordering::Greater => println!("Too big!"),
		Ordering::Equal => {
			println!("You win!");
			break;
		}
	}

	}
}
